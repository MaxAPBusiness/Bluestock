 debajo de linea 1185 o def saveSubgrupos(self, datos: list | None = None):
 
 
 
 # def saveUbicaciones(self, datos: list | None = None):
    #     """Este método guarda los cambios hechos en la tabla de la ui
    #     en la tabla ubicaciones de la base de datos.
        
    #     Parámetros
    #     ----------
    #         datos: list | None = None
    #             Los datos de la tabla ubicaciones, que se usarán para obtener
    #             el id de la fila en la tabla.
    #     """
        
    #     # Se pregunta al usuario si desea guardar los cambios en la
    #     # tabla. NOTA: Esos tabs en el string son para mantener la
    #     # misma identación en todas las líneas así dedent funciona,
    #     # sino le da ansiedad.
    #     # Obtenemos los ids de los campos que no podemos dejar vacíos.
    #     tabla=self.pantallaUbicaciones.tableWidget
    #     row = tabla.indexAt(self.sender().pos()).row()
    #     iCampos=(0, 1, 5, 6, 7)
    #     # Por cada campo que no debe ser nulo...
    #     for iCampo in iCampos:
    #         # Si el campo está vacio...
    #         if tabla.item(row, iCampo).text() == "":
    #             # Le pide al usuario que termine de llenar los campos
    #             # y corta la función.
    #             mensaje = """       Hay campos en blanco que son obligatorios.
    #             Ingreselos e intente nuevamente."""
    #             return PopUp("Error", mensaje).exec()

    #     try:
    #         cond = int(tabla.item(row, 1).text())
    #         rep = int(tabla.item(row, 2).text())
    #         baja = int(tabla.item(row, 3).text())
    #     except:
    #         mensaje = """       Los datos ingresados no son válidos.
    #         Por favor, ingrese los datos correctamente."""
    #         return PopUp("Error", mensaje).exec()

    #     info = """        Esta acción no se puede deshacer.
    #     ¿Desea guardar los cambios hechos en la fila en la base de datos?"""
    #     popup = PopUp("Pregunta", info).exec()
    #     if popup == QtWidgets.QMessageBox.StandardButton.Yes:
            

    #         # Se obtiene el texto de todas las celdas.
    #         desc = tabla.item(row, 0).text()
    #         grupo = tabla.item(row, 5).text()
    #         subgrupo = tabla.item(row, 6).text()
    #         ubi = tabla.item(row, 7).text()

    #         # Verificamos que el grupo esté registrado.
    #         idGrupo=bdd.cur.execute(
    #             "SELECT id FROM grupos WHERE descripcion = ?", (grupo,)
    #         ).fetchone()
    #         # Si no lo está...
    #         if not idGrupo:
    #             # Muestra un mensaje de error al usuario y termina la
    #             # función.
    #             info = """        El grupo ingresado no está registrado.
    #             Regístrelo e ingrese nuevamente"""
    #             return PopUp("Error", info).exec()

    #         # Verificamos que el subgrupo esté registrado y que
    #         # coincida con el grupo ingresado.
    #         idSubgrupo=bdd.cur.execute(
    #             "SELECT id FROM subgrupos WHERE descripcion = ? AND id_grupo = ?",
    #             (subgrupo, idGrupo[0],)
    #         ).fetchone()
    #         if not idSubgrupo:
    #             info = """El subgrupo ingresado no está registrado o no
    #             pertenece al grupo ingresado. Regístrelo o asegúrese que esté
    #             relacionado al grupo e ingrese nuevamente."""
    #             return PopUp("Error", info).exec()
            
    #         idUbi=bdd.cur.execute("SELECT id FROM ubicaciones WHERE descripcion = ?",
    #                               (ubi,)).fetchone()
    #         if not idUbi:
    #             info = "La ubicación ingresada no está registrada. Regístrela e intente nuevamente."
    #             return PopUp("Error", info).exec()
            
    #         if datos:
    #             bdd.cur.execute(
    #                 "INSERT INTO ubicaciones VALUES(NULL, ?, ?, ?, ?, ?)",
    #                 (desc, cond, rep, baja, idSubgrupo[0], idUbi[0],)
    #             )
    #         else:
    #             idd=datos[row][0]
    #             # Guardamos los datos de la fila en
    #             bdd.cur.execute(
    #                 """UPDATE ubicaciones
    #                 SET descripcion = ?, cant_condiciones = ?, cant_reparacion=?,
    #                 cant_baja = ?, id_subgrupo = ?, id_ubi=?
    #                 WHERE id = ?""",
    #                 (desc, cond, rep, baja, idSubgrupo[0], idUbi[0], idd,)
    #             )
    #         bdd.con.commit()
    #         self.fetchUbicaciones()
    #         info = "Los datos se han guardado con éxito."
    #         PopUp("Aviso", info).exec()

    # def saveClases(self, datos: list | None = None):
    #     """Este método guarda los cambios hechos en la tabla de la ui
    #     en la tabla clases de la base de datos.
        
    #     Parámetros
    #     ----------
    #         datos: list | None = None
    #             Los datos de la tabla clases, que se usarán para 
    #             obtener el id de la fila en la tabla.
    #     """
        
    #     # Se pregunta al usuario si desea guardar los cambios en la
    #     # tabla. NOTA: Esos tabs en el string son para mantener la
    #     # misma identación en todas las líneas así dedent funciona,
    #     # sino le da ansiedad.
    #     # Obtenemos los ids de los campos que no podemos dejar vacíos.
    #     tabla=self.pantallaStock.tableWidget
    #     row = tabla.indexAt(self.sender().pos()).row()
    #     iCampos=(0, 1, 5, 6, 7)
    #     # Por cada campo que no debe ser nulo...
    #     for iCampo in iCampos:
    #         # Si el campo está vacio...
    #         if tabla.item(row, iCampo).text() == "":
    #             # Le pide al usuario que termine de llenar los campos
    #             # y corta la función.
    #             mensaje = """       Hay campos en blanco que son obligatorios.
    #             Ingreselos e intente nuevamente."""
    #             return PopUp("Error", mensaje).exec()

    #     try:
    #         cond = int(tabla.item(row, 1).text())
    #         rep = int(tabla.item(row, 2).text())
    #         baja = int(tabla.item(row, 3).text())
    #     except:
    #         mensaje = """       Los datos ingresados no son válidos.
    #         Por favor, ingrese los datos correctamente."""
    #         return PopUp("Error", mensaje).exec()

    #     info = """        Esta acción no se puede deshacer.
    #     ¿Desea guardar los cambios hechos en la fila en la base de datos?"""
    #     popup = PopUp("Pregunta", info).exec()
    #     if popup == QtWidgets.QMessageBox.StandardButton.Yes:
            

    #         # Se obtiene el texto de todas las celdas.
    #         desc = tabla.item(row, 0).text()
    #         grupo = tabla.item(row, 5).text()
    #         subgrupo = tabla.item(row, 6).text()
    #         ubi = tabla.item(row, 7).text()

    #         # Verificamos que el grupo esté registrado.
    #         idGrupo=bdd.cur.execute(
    #             "SELECT id FROM grupos WHERE descripcion = ?", (grupo,)
    #         ).fetchone()
    #         # Si no lo está...
    #         if not idGrupo:
    #             # Muestra un mensaje de error al usuario y termina la
    #             # función.
    #             info = """        El grupo ingresado no está registrado.
    #             Regístrelo e ingrese nuevamente"""
    #             return PopUp("Error", info).exec()

    #         # Verificamos que el subgrupo esté registrado y que
    #         # coincida con el grupo ingresado.
    #         idSubgrupo=bdd.cur.execute(
    #             "SELECT id FROM subgrupos WHERE descripcion = ? AND id_grupo = ?",
    #             (subgrupo, idGrupo[0],)
    #         ).fetchone()
    #         if not idSubgrupo:
    #             info = """El subgrupo ingresado no está registrado o no
    #             pertenece al grupo ingresado. Regístrelo o asegúrese que esté
    #             relacionado al grupo e ingrese nuevamente."""
    #             return PopUp("Error", info).exec()
            
    #         idUbi=bdd.cur.execute("SELECT id FROM ubicaciones WHERE descripcion = ?",
    #                               (ubi,)).fetchone()
    #         if not idUbi:
    #             info = "La ubicación ingresada no está registrada. Regístrela e intente nuevamente."
    #             return PopUp("Error", info).exec()
            
    #         if datos:
    #             bdd.cur.execute(
    #                 "INSERT INTO stock VALUES(NULL, ?, ?, ?, ?, ?)",
    #                 (desc, cond, rep, baja, idSubgrupo[0], idUbi[0],)
    #             )
    #         else:
    #             idd=datos[row][0]
    #             # Guardamos los datos de la fila en
    #             bdd.cur.execute(
    #                 """UPDATE stock
    #                 SET descripcion = ?, cant_condiciones = ?, cant_reparacion=?,
    #                 cant_baja = ?, id_subgrupo = ?, id_ubi=?
    #                 WHERE id = ?""",
    #                 (desc, cond, rep, baja, idSubgrupo[0], idUbi[0], idd,)
    #             )
    #         bdd.con.commit()
    #         self.fetchStock()
    #         info = "Los datos se han guardado con éxito."
    #         PopUp("Aviso", info).exec()